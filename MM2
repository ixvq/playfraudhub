local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "ü§çLoyal's MM2 Scriptü§ç",
   LoadingTitle = "Loyal Hub",
   LoadingSubtitle = "By loyaltwice",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "scriptbyloyal"
   },
   Discord = {
      Enabled = true,
      Invite = "waSWukEAaF", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "MM2 Script | Key",
      Subtitle = "Key In Discord Server",
      Note = "Join Server From Misc Tab",
      FileName = "loyalhubkey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/jyasz0sp"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè†Universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Executed",
   Content = "Successfully Executed The Script",
   Duration = 4.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("Script Made By loyaltwice")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
   -- LocalScript

local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onJumpRequest()
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end

userInputService.JumpRequest:Connect(onJumpRequest)

-- Ensure the character's humanoid is always ready to jump
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
end)

   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "WalkspeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local AutofarmToggle = MainTab:CreateToggle({
   Name = "Autofarm",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local getNil = function(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local function simulateFall(targetPosition)
    -- Simulate a fall by adjusting the player's velocity and using animations
    local fallHeight = 40
    local fallDuration = 1.5
    local fallVelocity = Vector3.new(0, -fallHeight / fallDuration, 0)
    
    -- Adjust the player's position above the target
    humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, fallHeight, 0))
    
    -- Apply downward velocity to simulate falling
    humanoidRootPart.Velocity = fallVelocity
    
    -- Wait for the fall to complete
    wait(fallDuration)
    
    -- Stop the fall and place the player at the target position
    humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, 5, 0)) -- Adjust height if needed
end

local function teleportToRandomBeachBall()
    local gameModel = getNil("Game", "DataModel")
    if not gameModel then
        warn("Game model not found!")
        return
    end

    local coinContainer = gameModel.Workspace.Normal:FindFirstChild("CoinContainer")
    if not coinContainer then
        warn("CoinContainer not found!")
        return
    end

    local objects = coinContainer:GetChildren()
    if #objects == 0 then
        warn("No objects found in CoinContainer!")
        return
    end

    -- Randomly select an object from the container
    local randomIndex = math.random(1, #objects)
    local selectedObject = objects[randomIndex]

    -- Ensure the selected object is a BasePart and simulate fall to the player
    if selectedObject:IsA("BasePart") then
        simulateFall(selectedObject.Position)
    else
        warn("Selected object is not a BasePart!")
    end
end

-- Main loop to simulate fall to random beach balls
while true do
    teleportToRandomBeachBall()
    wait(math.random(4, 4)) -- Random delay between moves to avoid detection
end
   end,
})

local FpsTab = Window:CreateTab("FPS", nil) -- Title, Image
local Section = FpsTab:CreateSection("Choose Which FPS Boosts you want")

local FpsButton = FpsTab:CreateButton({
   Name = "Remove weapons+pets",
   Callback = function()
        local Workspace = game:GetService("Workspace")

for i,v in pairs (Workspace:GetDescendants()) do
    if v.Name == "Pet" then
        v:Destroy()
    elseif v.Name == "KnifeDisplay" then
        v:Destroy()
    elseif v.Name == "GunDisplay" then
        v:Destroy()
    end
end
   end,
})

local CombatTab = Window:CreateTab("Combat", nil) -- Title, Image
local Section = CombatTab:CreateSection("For murder or sheriff")

local KillallButton = CombatTab:CreateButton({
   Name = "Kill all (Murder)",
   Callback = function()
        local Character = game.Players.LocalPlayer.Character
local knife = Character and Character:FindFirstChild("Knife")

for _, player in ipairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        wait()
        local playerCharacter = player.Character
        local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            Stab()
            firetouchinterest(humanoidRootPart, knife.Handle, 1)
            firetouchinterest(humanoidRootPart, knife.Handle, 0)
        end
    end
end
   end,
})
