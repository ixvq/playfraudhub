local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "print('made by Playfraud')",
   LoadingTitle = "Loyal Hub",
   LoadingSubtitle = "By loyaltwice",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "scriptbyplayfraud"
   },
   Discord = {
      Enabled = true,
      Invite = "waSWukEAaF", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "MM2 Script | Key",
      Subtitle = "Key In Discord Server",
      Note = "Join Server From Misc Tab",
      FileName = "loyalhubkey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/jyasz0sp"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Executed",
   Content = "Successfully Executed The Script",
   Duration = 4.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("Script Made By Playfraud")
      end
   },
},
})

local InfiniteJumpButton = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
   -- LocalScript

local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onJumpRequest()
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end

userInputService.JumpRequest:Connect(onJumpRequest)

-- Ensure the character's humanoid is always ready to jump
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
end)

   end,
})

local WalkspeedSlider = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "WalkspeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local JumpPowerSlider = MainTab:CreateSlider({
   Name = "Jump Power Slider",
   Range = {0, 500},
   Increment = 1,
   Suffix = "Jump Power",
   CurrentValue = 50,
   Flag = "JumpPowerSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})


local TeleportSection = MainTab:CreateSection("Teleport Section")
local LobbyButton = MainTab:CreateButton({
   Name = "Lobby",
   Callback = function()
         local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport the player 10 studs above the given CFrame
local function teleportAboveCFrame(targetCFrame)
    -- Offset the target CFrame by 10 studs in the Y-axis
    local newCFrame = targetCFrame + Vector3.new(0, 10, 0)

    -- Teleport the player's HumanoidRootPart to the new CFrame
    humanoidRootPart.CFrame = newCFrame
end

-- The specified CFrame to teleport above
local targetCFrame = CFrame.new(
    -122.343071, 136.772766, 1.38007069, -- Position
    -0.499959469, 0, -0.866048813,       -- Rotation matrix row 1
    0, 1, 0,                             -- Rotation matrix row 2
    0.866048813, 0, -0.499959469         -- Rotation matrix row 3
)

-- Call the function to teleport
teleportAboveCFrame(targetCFrame)
   end,
})

local VotingButton = MainTab:CreateButton({
   Name = "Voting Room",
   Callback = function()
         local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport the player 5 studs above the given CFrame
local function teleportAboveCFrame(targetCFrame)
    -- Offset the target CFrame by 5 studs in the Y-axis
    local newCFrame = targetCFrame + Vector3.new(0, 5, 0)

    -- Teleport the player's HumanoidRootPart to the new CFrame
    humanoidRootPart.CFrame = newCFrame
end

-- The specified CFrame to teleport above (Updated with the new CFrame)
local targetCFrame = CFrame.new(
    -109.785713, 141.04776, 81.8176041,  -- Position
    0, -1, 0,                             -- Rotation matrix row 1
    0, 0, 1,                             -- Rotation matrix row 2
    -1, 0, 0                             -- Rotation matrix row 3
)

-- Call the function to teleport
teleportAboveCFrame(targetCFrame)
   end,
})

local NoclipButton = MainTab:CreateButton({
   Name = "Noclip",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function enableNoclip()
    -- Function to set CanCollide to false for all parts
    local function noclip()
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end

    -- Connect the noclip function to RunService's Stepped event
    RunService.Stepped:Connect(noclip)
end

-- Enable noclip for the player
enableNoclip()

   end,
})

local FlyButton = MainTab:CreateButton({
   Name = "Fly (X)",
   Callback = function()
         local player = game.Players.LocalPlayer
local character = player.Character
local humanoid = character:WaitForChild("Humanoid")
 
local flying = false
 
local function toggleFly()
    flying = not flying
    humanoid.PlatformStand = flying
    humanoid:Move(Vector3.new(0, 1000, 0))
end
 
game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.F then
        toggleFly()
    end
end)
 
   end,
})

local AutofarmToggle = MainTab:CreateToggle({
   Name = "Autofarm",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       local Players = game:GetService("Players")
       local RunService = game:GetService("RunService")
       local player = Players.LocalPlayer
       local character = player.Character or player.CharacterAdded:Wait()
       local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
       
       local getNil = function(name, class)
           for _, v in next, getnilinstances() do
               if v.ClassName == class and v.Name == name then
                   return v
               end
           end
       end
       
       local function simulateFall(targetPosition)
           local fallHeight = 70
           local fallDuration = 1.5
           local fallVelocity = Vector3.new(0, -fallHeight / fallDuration, 0)
           
           humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, fallHeight, 0))
           humanoidRootPart.Velocity = fallVelocity
           wait(fallDuration)
           humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
           humanoidRootPart.CFrame = CFrame.new(targetPosition + Vector3.new(0, 5, 0))
       end
       
       local function teleportToRandomBeachBall()
           local gameModel = getNil("Game", "DataModel")
           if not gameModel then
               warn("Game model not found!")
               return
           end

           local coinContainer = gameModel.Workspace.Normal:FindFirstChild("CoinContainer")
           if not coinContainer then
               warn("CoinContainer not found!")
               return
           end

           local objects = coinContainer:GetChildren()
           if #objects == 0 then
               warn("No objects found in CoinContainer!")
               return
           end

           local randomIndex = math.random(1, #objects)
           local selectedObject = objects[randomIndex]

           if selectedObject:IsA("BasePart") then
               simulateFall(selectedObject.Position)
           else
               warn("Selected object is not a BasePart!")
           end
       end

       -- Track the state of the autofarm
       _G.AutofarmActive = Value

       -- Start the autofarm loop
       spawn(function()
           while _G.AutofarmActive do
               teleportToRandomBeachBall()
               wait(math.random(2, 3)) -- Adjust the delay to avoid detection
           end
       end)
   end
})

local FpsTab = Window:CreateTab("FPS", nil) -- Title, Image
local Section = FpsTab:CreateSection("Choose Which FPS Boosts you want")

local FpsButton = FpsTab:CreateButton({
   Name = "Remove weapons+pets",
   Callback = function()
        local Workspace = game:GetService("Workspace")

for i,v in pairs (Workspace:GetDescendants()) do
    if v.Name == "Pet" then
        v:Destroy()
    elseif v.Name == "KnifeDisplay" then
        v:Destroy()
    elseif v.Name == "GunDisplay" then
        v:Destroy()
    end
end
   end,
})

local Fps2Button = FpsTab:CreateButton({
   Name = "FpsBoost2",
   Callback = function()
         local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Function to lower graphical settings
local function lowerGraphicsSettings()
    -- Disable global shadows
    Lighting.GlobalShadows = false

    -- Reduce the distance at which objects render
    game.Lighting.FogEnd = 500  -- Lower this value to reduce render distance

    -- Disable specific visual effects
    Lighting.Brightness = 1
    Lighting.OutdoorAmbient = Color3.fromRGB(127, 127, 127)

    -- Adjust terrain decoration settings
    if game.Workspace.Terrain then
        game.Workspace.Terrain.Decoration = false
    end

    -- Disable textures for parts
    local function disableTextures(object)
        if object:IsA("Decal") or object:IsA("Texture") then
            object:Destroy()  -- Remove textures and decals
        elseif object:IsA("BasePart") then
            object.Material = Enum.Material.Plastic
            object.Reflectance = 0
        end
    end

    -- Apply texture disabling to all existing parts and listen for new ones
    for _, object in pairs(workspace:GetDescendants()) do
        disableTextures(object)
    end
    workspace.DescendantAdded:Connect(disableTextures)
end

-- Run the function to lower graphics settings
lowerGraphicsSettings()
   end,
})

local CombatTab = Window:CreateTab("Combat", nil) -- Title, Image
local Section = CombatTab:CreateSection("For murder or sheriff")

local KillallButton = CombatTab:CreateButton({
   Name = "Kill all (Murder)",
   Callback = function()
        local Character = game.Players.LocalPlayer.Character
local knife = Character and Character:FindFirstChild("Knife")

for _, player in ipairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        wait()
        local playerCharacter = player.Character
        local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            Stab()
            firetouchinterest(humanoidRootPart, knife.Handle, 1)
            firetouchinterest(humanoidRootPart, knife.Handle, 0)
        end
    end
end
   end,
})

local GrabGunButton = CombatTab:CreateButton({
   Name = "Grab Gun",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local getNil = function(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local initialPosition

local function grabGun()
    -- Store the player's initial position
    initialPosition = humanoidRootPart.Position

    local gameModel = getNil("Game", "DataModel")
    if not gameModel then
        warn("Game model not found!")
        return
    end

    -- Assuming the gun can be accessed via this path or similar
    local gun = gameModel.Workspace.Normal:GetChildren()[8].HumanoidRootPart
    if not gun then
        warn("Gun not found!")
        return
    end

    -- Teleport the player to the gun's position
    humanoidRootPart.CFrame = CFrame.new(gun.Position + Vector3.new(0, 3, 0)) -- Slight offset to avoid exact overlap

    -- Wait a short moment to simulate the grab
    wait(0.5)

    -- Teleport back to the original position
    humanoidRootPart.CFrame = CFrame.new(initialPosition)
end

-- Monitor the game for the gun and teleport to it when detected
while true do
    grabGun()
    wait(2) -- Delay to avoid constant teleportation which could be detected as suspicious behavior
end

   end,
})

local SilentAimButton = CombatTab:CreateButton({
   Name = "Silent Aim",
   Callback = function()
         -- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

-- Colors
local colors = {
    Murderer = Color3.fromRGB(255, 0, 0),   -- Red
    Sheriff = Color3.fromRGB(0, 0, 255),   -- Blue
    Innocent = Color3.fromRGB(0, 255, 0)   -- Green
}

-- Function to get player roles (replace with actual game role detection logic)
local function getPlayerRole(player)
    -- Example roles, replace this with the actual way to get player roles
    local role = player:FindFirstChild("Role")
    if role then
        return role.Value
    end
    return nil
end

-- Function to apply glow to character
local function applyGlow(character, color)
    -- Create a new Glow effect
    local glow = Instance.new("Highlight")
    glow.Parent = character
    glow.Adornee = character
    glow.OutlineColor = color
    glow.OutlineTransparency = 0 -- Change transparency as needed
    glow.FillColor = color
    glow.FillTransparency = 0.5 -- Adjust transparency as needed
end

-- Function to clear existing glow
local function clearGlow(character)
    for _, v in ipairs(character:GetChildren()) do
        if v:IsA("Highlight") then
            v:Destroy()
        end
    end
end

-- Function to update player roles
local function updateRoles()
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local role = getPlayerRole(player)
            local color = nil

            if role == "Murderer" then
                color = colors.Murderer
            elseif role == "Sheriff" then
                color = colors.Sheriff
            elseif role == "Innocent" then
                color = colors.Innocent
            end

            if color then
                clearGlow(player.Character)
                applyGlow(player.Character, color)
            end
        end
    end
end

-- Continuously update player roles
RunService.RenderStepped:Connect(function()
    updateRoles()
end)

   end,
})

local SecurityTab = Window:CreateTab("Security", nil) -- Title, Image
local SecuritySection = SecurityTab:CreateSection("Secure urself using this!")

local AntiFlingButton = SecurityTab:CreateButton({
   Name = "Anti Fling",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local lastPosition = humanoidRootPart.Position
local allowedDistance = 50 -- Maximum allowed distance change per frame

local function antiFling()
    RunService.Heartbeat:Connect(function()
        local currentPosition = humanoidRootPart.Position
        local distance = (currentPosition - lastPosition).Magnitude

        if distance > allowedDistance then
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.CFrame = CFrame.new(lastPosition)
        else
            lastPosition = currentPosition
        end
    end)
end

character.HumanoidRootPart.AncestryChanged:Connect(function()
    if not character:IsDescendantOf(workspace) then
        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        lastPosition = humanoidRootPart.Position
    end
end)

-- Ensure the anti-fling script runs
player.CharacterAdded:Connect(function(char)
    character = char
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    lastPosition = humanoidRootPart.Position
    antiFling()
end)

-- Initial run
antiFling()

   end,
})

local AntiVoidButton = SecurityTab:CreateButton({
   Name = "Anti Void (don't use before/while autofarming!)",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local positionHistory = {}
local checkInterval = 1 -- Interval in seconds to save the player's position
local maxHistoryTime = 10 -- Maximum time in seconds to keep positions

-- Save the player's position at regular intervals
local function savePosition()
    while true do
        table.insert(positionHistory, 1, humanoidRootPart.Position)
        if #positionHistory > maxHistoryTime / checkInterval then
            table.remove(positionHistory)
        end
        wait(checkInterval)
    end
end

-- Check if the player is falling into the void and teleport them back
local function antiVoid()
    local voidYLevel = -50 -- Y level considered as void

    RunService.Heartbeat:Connect(function()
        if humanoidRootPart.Position.Y < voidYLevel then
            if #positionHistory > 0 then
                local lastSafePosition = positionHistory[1]
                humanoidRootPart.CFrame = CFrame.new(lastSafePosition)
                humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            end
        end
    end)
end

character.HumanoidRootPart.AncestryChanged:Connect(function()
    if not character:IsDescendantOf(workspace) then
        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        positionHistory = {}
        coroutine.wrap(savePosition)()
        antiVoid()
    end
end)

-- Start saving positions and anti-void check
coroutine.wrap(savePosition)()
antiVoid()

   end,
})
