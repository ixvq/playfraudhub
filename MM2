local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "print('made by t7u7')",
   LoadingTitle = "t7u7 Hub",
   LoadingSubtitle = "By t7u7",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "scriptbyt7u7"
   },
   Discord = {
      Enabled = false,
      Invite = "waSWukEAaF", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "MM2 Script | Key",
      Subtitle = "Key In Discord Server",
      Note = "Join Server From Misc Tab",
      FileName = "loyalhubkey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/GUqtT4VT"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Executed",
   Content = "Successfully Executed The Script",
   Duration = 4.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("Script Made By Playfraud")
      end
   },
},
})

local InfiniteJumpButton = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
   -- LocalScript

local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onJumpRequest()
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end

userInputService.JumpRequest:Connect(onJumpRequest)

-- Ensure the character's humanoid is always ready to jump
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
end)

   end,
})

local WalkspeedSlider = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "WalkspeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local JumpPowerSlider = MainTab:CreateSlider({
   Name = "Jump Power Slider",
   Range = {0, 500},
   Increment = 1,
   Suffix = "Jump Power",
   CurrentValue = 50,
   Flag = "JumpPowerSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})


local TeleportSection = MainTab:CreateSection("Teleport Section")
local LobbyButton = MainTab:CreateButton({
   Name = "Lobby",
   Callback = function()
         local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport the player 10 studs above the given CFrame
local function teleportAboveCFrame(targetCFrame)
    -- Offset the target CFrame by 10 studs in the Y-axis
    local newCFrame = targetCFrame + Vector3.new(0, 10, 0)

    -- Teleport the player's HumanoidRootPart to the new CFrame
    humanoidRootPart.CFrame = newCFrame
end

-- The specified CFrame to teleport above
local targetCFrame = CFrame.new(
    -122.343071, 136.772766, 1.38007069, -- Position
    -0.499959469, 0, -0.866048813,       -- Rotation matrix row 1
    0, 1, 0,                             -- Rotation matrix row 2
    0.866048813, 0, -0.499959469         -- Rotation matrix row 3
)

-- Call the function to teleport
teleportAboveCFrame(targetCFrame)
   end,
})

local VotingButton = MainTab:CreateButton({
   Name = "Voting Room",
   Callback = function()
         local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport the player 5 studs above the given CFrame
local function teleportAboveCFrame(targetCFrame)
    -- Offset the target CFrame by 5 studs in the Y-axis
    local newCFrame = targetCFrame + Vector3.new(0, 5, 0)

    -- Teleport the player's HumanoidRootPart to the new CFrame
    humanoidRootPart.CFrame = newCFrame
end

-- The specified CFrame to teleport above (Updated with the new CFrame)
local targetCFrame = CFrame.new(
    -109.785713, 141.04776, 81.8176041,  -- Position
    0, -1, 0,                             -- Rotation matrix row 1
    0, 0, 1,                             -- Rotation matrix row 2
    -1, 0, 0                             -- Rotation matrix row 3
)

-- Call the function to teleport
teleportAboveCFrame(targetCFrame)
   end,
})

local NoclipButton = MainTab:CreateButton({
   Name = "Noclip",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function enableNoclip()
    -- Function to set CanCollide to false for all parts
    local function noclip()
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end

    -- Connect the noclip function to RunService's Stepped event
    RunService.Stepped:Connect(noclip)
end

-- Enable noclip for the player
enableNoclip()

   end,
})

local FlyButton = MainTab:CreateButton({
   Name = "Fly - X",
   Callback = function()
      local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local flying = false
local speed = 50
local bodyVelocity
local bodyGyro

local function startFlying()
    if flying then return end
    flying = true

    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
    bodyVelocity.P = 1000
    bodyVelocity.Parent = humanoidRootPart

    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(100000, 100000, 100000)
    bodyGyro.CFrame = humanoidRootPart.CFrame
    bodyGyro.P = 1000
    bodyGyro.Parent = humanoidRootPart

    local function fly()
        local camera = workspace.CurrentCamera
        local moveDirection = Vector3.new(0, 0, 0)

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + (camera.CFrame.LookVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - (camera.CFrame.LookVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - (camera.CFrame.RightVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + (camera.CFrame.RightVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + Vector3.new(0, 1, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDirection = moveDirection - Vector3.new(0, 1, 0)
        end

        bodyVelocity.Velocity = moveDirection * speed
        bodyGyro.CFrame = camera.CFrame
    end

    RunService.RenderStepped:Connect(fly)
end

local function stopFlying()
    if not flying then return end
    flying = false

    if bodyVelocity then
        bodyVelocity:Destroy()
    end
    if bodyGyro then
        bodyGyro:Destroy()
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.X then  -- Press "X" to toggle flying
        if flying then
            stopFlying()
        else
            startFlying()
        end
    end
end)
   end,
})

local AutofarmToggle = MainTab:CreateToggle({
   Name = "Autofarm",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local getNil = function(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local function enableNoClip()
    local function noClip()
        for _, v in pairs(character:GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide then
                v.CanCollide = false
            end
        end
    end

    RunService.Stepped:Connect(noClip)
end

local function moveToTarget(targetPosition)
    local offsetUnderMap = Vector3.new(0, -3, 0) -- Adjust the Y offset to stay under the map but not fall through
    local riseOffset = Vector3.new(0, 5, 0) -- Rise the character slightly to collect the coin
    humanoidRootPart.CFrame = CFrame.new(targetPosition + offsetUnderMap + riseOffset)
end

local function findNearestObject()
    local gameModel = getNil("Game", "DataModel")
    if not gameModel then
        warn("Game model not found!")
        return
    end

    local coinContainer = gameModel.Workspace.Normal:FindFirstChild("CoinContainer")
    if not coinContainer then
        warn("CoinContainer not found!")
        return
    end

    local objects = coinContainer:GetChildren()
    if #objects == 0 then
        warn("No objects found in CoinContainer!")
        return
    end

    local nearestObject = nil
    local shortestDistance = math.huge

    for _, obj in pairs(objects) do
        if obj:IsA("BasePart") then
            local distance = (humanoidRootPart.Position - obj.Position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestObject = obj
            end
        end
    end

    return nearestObject
end

local function teleportToNearestObject()
    local nearestObject = findNearestObject()
    if nearestObject then
        moveToTarget(nearestObject.Position)
    else
        warn("No nearest object found!")
    end
end

-- Track the state of the autofarm
_G.AutofarmActive = true

-- Start the autofarm loop
spawn(function()
    while _G.AutofarmActive do
        teleportToNearestObject()
        wait(3) -- Fixed 3-second delay
    end
end)

-- Enable no-clip
enableNoClip()

-- Anti-detection basic measures
local function kickProtection()
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    local oldNamecall = mt.__namecall

    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if tostring(method) == "Kick" then
            return
        end
        return oldNamecall(self, ...)
    end)
end

kickProtection()

   end
})

local FpsTab = Window:CreateTab("FPS", nil) -- Title, Image
local Section = FpsTab:CreateSection("Choose Which FPS Boosts you want")

local FpsButton = FpsTab:CreateButton({
   Name = "Remove weapons+pets",
   Callback = function()
        local Workspace = game:GetService("Workspace")

for i,v in pairs (Workspace:GetDescendants()) do
    if v.Name == "Pet" then
        v:Destroy()
    elseif v.Name == "KnifeDisplay" then
        v:Destroy()
    elseif v.Name == "GunDisplay" then
        v:Destroy()
    end
end
   end,
})

local Fps2Button = FpsTab:CreateButton({
   Name = "FpsBoost2",
   Callback = function()
         -- FPS Boost Script
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer

-- Function to reduce the quality of graphics
local function optimizeGraphics()
    -- Set Lighting settings to low quality
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 1000
    Lighting.Brightness = 1
    Lighting.ClockTime = 12

    -- Disable certain effects
    for _, effect in ipairs(Lighting:GetChildren()) do
        if effect:IsA("BlurEffect") or effect:IsA("SunRaysEffect") or effect:IsA("BloomEffect") then
            effect.Enabled = false
        end
    end
end

-- Function to disable unneeded parts and reduce part quality
local function reducePartQuality()
    -- Iterate over all parts in the game
    for _, object in ipairs(workspace:GetDescendants()) do
        if object:IsA("Part") or object:IsA("UnionOperation") or object:IsA("MeshPart") then
            object.Material = Enum.Material.SmoothPlastic
            object.CastShadow = false
        elseif object:IsA("ParticleEmitter") or object:IsA("Trail") then
            object.Enabled = false
        end
    end
end

-- Function to optimize player character
local function optimizeCharacter()
    if player and player.Character then
        for _, child in ipairs(player.Character:GetDescendants()) do
            if child:IsA("BasePart") then
                child.Material = Enum.Material.SmoothPlastic
                child.CastShadow = false
            elseif child:IsA("ParticleEmitter") or child:IsA("Trail") then
                child.Enabled = false
            end
        end
    end
end

-- Connect character added event
player.CharacterAdded:Connect(optimizeCharacter)

-- Call optimization functions
optimizeGraphics()
reducePartQuality()
optimizeCharacter()

   end,
})

local Fps3Button = FpsTab:CreateButton({
   Name = "FpsBoost3",
   Callback = function()
         -- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer

-- Optimize physics throttling
RunService:Set3dRenderingEnabled(false)  -- Disables 3D rendering, useful for bots or background tasks

-- Function to optimize physics settings
local function optimizePhysics()
    -- Set Physics settings to a lower frequency for non-essential objects
    local physicsService = game:GetService("PhysicsService")
    physicsService.Throttle = Enum.ThrottleResetPriority.OccupantTimeout
end

-- Function to optimize rendering distance
local function optimizeRenderingDistance()
    -- Reduce the rendering distance for objects
    for _, object in ipairs(workspace:GetDescendants()) do
        if object:IsA("BasePart") or object:IsA("UnionOperation") or object:IsA("MeshPart") then
            object.Changed:Connect(function(property)
                if property == "Position" or property == "Size" then
                    local distance = (object.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance > 500 then  -- Adjust the distance threshold as needed
                        object.Transparency = 1
                    else
                        object.Transparency = 0
                    end
                end
            end)
        end
    end
end

-- Function to optimize GUI elements
local function optimizeGUI()
    -- Disable or minimize resource-heavy GUI elements
    local playerGui = player:WaitForChild("PlayerGui")
    for _, gui in ipairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            gui.Enabled = false  -- Disable GUI elements to reduce draw calls
        end
    end
end

-- Call optimization functions
optimizePhysics()
optimizeRenderingDistance()
optimizeGUI()

   end,
})

local CombatTab = Window:CreateTab("Combat", nil) -- Title, Image
local Section = CombatTab:CreateSection("For murder or sheriff")

local KillallButton = CombatTab:CreateButton({
   Name = "Kill all (Murder)",
   Callback = function()
        local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Knife = Character:FindFirstChild("Knife") -- Ensure this is the correct name

-- Function to simulate the stabbing action
local function Stab()
    if Knife and Knife:FindFirstChild("Handle") then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    -- Simulate touch interaction with the knife
                    firetouchinterest(humanoidRootPart, Knife.Handle, 1)
                    firetouchinterest(humanoidRootPart, Knife.Handle, 0)
                end
            end
        end
    end
end

-- Check if the knife is equipped, and if not, equip it
if Knife and not Knife.Parent:IsA("Tool") then
    LocalPlayer.Backpack:WaitForChild(Knife.Name).Parent = Character
end

-- Call Stab function when the knife is equipped
Knife.Equipped:Connect(function()
    Stab()
end)

   end,
})

local NormalizeAnimsButton = MainTab:CreateButton({
   Name = "Normalize Anims",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local desiredSpeed = 25
local visualSpeed = 16

local function adjustAnimationSpeed()
    -- Normalize animation speed to look like the character is moving at visualSpeed
    local speedRatio = visualSpeed / desiredSpeed

    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        track:AdjustSpeed(speedRatio)
    end
end

-- Set the desired speed and adjust animations accordingly
humanoid.WalkSpeed = desiredSpeed

RunService.RenderStepped:Connect(adjustAnimationSpeed)

   end,
})

local SecurityTab = Window:CreateTab("Security", nil) -- Title, Image
local SecuritySection = SecurityTab:CreateSection("Secure urself using this!")

local AntiFlingButton = SecurityTab:CreateButton({
   Name = "Anti Fling",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local lastPosition = humanoidRootPart.Position
local allowedDistance = 50 -- Maximum allowed distance change per frame

local function antiFling()
    RunService.Heartbeat:Connect(function()
        local currentPosition = humanoidRootPart.Position
        local distance = (currentPosition - lastPosition).Magnitude

        if distance > allowedDistance then
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.CFrame = CFrame.new(lastPosition)
        else
            lastPosition = currentPosition
        end
    end)
end

character.HumanoidRootPart.AncestryChanged:Connect(function()
    if not character:IsDescendantOf(workspace) then
        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        lastPosition = humanoidRootPart.Position
    end
end)

-- Ensure the anti-fling script runs
player.CharacterAdded:Connect(function(char)
    character = char
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    lastPosition = humanoidRootPart.Position
    antiFling()
end)

-- Initial run
antiFling()

   end,
})

local AntiVoidButton = SecurityTab:CreateButton({
   Name = "Anti Void (don't use before/while autofarming!)",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local positionHistory = {}
local checkInterval = 1 -- Interval in seconds to save the player's position
local maxHistoryTime = 10 -- Maximum time in seconds to keep positions

-- Save the player's position at regular intervals
local function savePosition()
    while true do
        table.insert(positionHistory, 1, humanoidRootPart.Position)
        if #positionHistory > maxHistoryTime / checkInterval then
            table.remove(positionHistory)
        end
        wait(checkInterval)
    end
end

-- Check if the player is falling into the void and teleport them back
local function antiVoid()
    local voidYLevel = -50 -- Y level considered as void

    RunService.Heartbeat:Connect(function()
        if humanoidRootPart.Position.Y < voidYLevel then
            if #positionHistory > 0 then
                local lastSafePosition = positionHistory[1]
                humanoidRootPart.CFrame = CFrame.new(lastSafePosition)
                humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            end
        end
    end)
end

character.HumanoidRootPart.AncestryChanged:Connect(function()
    if not character:IsDescendantOf(workspace) then
        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        positionHistory = {}
        coroutine.wrap(savePosition)()
        antiVoid()
    end
end)

-- Start saving positions and anti-void check
coroutine.wrap(savePosition)()
antiVoid()

   end,
})

local VisualsTab = Window:CreateTab("Visuals", nil) -- Title, Image
local EspButton = VisualsTab:CreateButton({
   Name = "Esp",
   Callback = function()
      local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = game:GetService("Workspace").CurrentCamera

local function createESP(player)
    local box = Drawing.new("Square")
    box.Visible = false
    box.Color = Color3.fromRGB(0, 255, 0)  -- Default color: Green
    box.Thickness = 2
    box.Transparency = 1
    box.Filled = false

    local nameTag = Drawing.new("Text")
    nameTag.Visible = false
    nameTag.Color = Color3.fromRGB(0, 255, 0)  -- Default color: Green
    nameTag.Size = 20
    nameTag.Center = true
    nameTag.Outline = false  -- No outline
    nameTag.Font = 5  -- Font 3 is smoother than Font 2
    nameTag.Text = player.Name

    local function updateESP()
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Head") then
            local rootPart = player.Character.HumanoidRootPart
            local head = player.Character.Head
            local rootVector, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
            local headVector = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 1, 0))  -- Slight offset for the name tag

            if onScreen then
                local size = Vector2.new(1000 / rootVector.Z, 1000 / rootVector.Z)
                local position = Vector2.new(rootVector.X - size.X / 2, rootVector.Y - size.Y / 2)
                local namePosition = Vector2.new(headVector.X, headVector.Y - size.Y / 2 - 10)

                box.Size = size
                box.Position = position
                box.Visible = true

                nameTag.Position = namePosition
                nameTag.Visible = true

                if player.Backpack:FindFirstChild("Gun") or (player.Character:FindFirstChild("Gun") and player.Character.Gun.Parent == player.Character) then
                    box.Color = Color3.fromRGB(0, 0, 255)  -- Blue for sheriff
                    nameTag.Color = Color3.fromRGB(0, 0, 255)  -- Blue for sheriff
                    box.Thickness = 2  -- Outline for blue
                elseif player.Backpack:FindFirstChild("Knife") or (player.Character:FindFirstChild("Knife") and player.Character.Knife.Parent == player.Character) then
                    box.Color = Color3.fromRGB(255, 0, 0)  -- Red for murderer
                    nameTag.Color = Color3.fromRGB(255, 0, 0)  -- Red for murderer
                    box.Thickness = 2  -- Outline for red
                else
                    box.Color = Color3.fromRGB(0, 255, 0)  -- Green for innocent
                    nameTag.Color = Color3.fromRGB(0, 255, 0)  -- Green for innocent
                    box.Thickness = 0  -- No outline for green
                end
            else
                box.Visible = false
                nameTag.Visible = false
            end
        else
            box.Visible = false
            nameTag.Visible = false
        end
    end

    RunService.RenderStepped:Connect(updateESP)
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= Players.LocalPlayer then
        createESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= Players.LocalPlayer then
        createESP(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if player ~= Players.LocalPlayer then
        -- Clean up ESP box and nameTag when a player leaves
    end
end)

   end,
})

local ChamsButton = VisualsTab:CreateButton({
   Name = "Player chams",
   Callback = function()
      local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local function createChams(player)
    if player == Players.LocalPlayer then return end  -- Don't create chams for the local player

    local highlight = Instance.new("Highlight")
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop  -- Makes it visible through walls
    highlight.FillTransparency = 0.5  -- Semi-transparent chams
    highlight.OutlineTransparency = 1  -- No outline
    highlight.Parent = player.Character  -- Initially parent to the character

    local function updateChams()
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            -- Attach highlight to the character if it got detached for any reason
            if highlight.Adornee ~= player.Character then
                highlight.Adornee = player.Character
                highlight.Parent = player.Character
            end

            -- Determine the player's role and set the color
            if player.Backpack:FindFirstChild("Gun") or (player.Character:FindFirstChild("Gun") and player.Character.Gun.Parent == player.Character) then
                highlight.FillColor = Color3.fromRGB(0, 0, 255)  -- Blue for sheriff
            elseif player.Backpack:FindFirstChild("Knife") or (player.Character:FindFirstChild("Knife") and player.Character.Knife.Parent == player.Character) then
                highlight.FillColor = Color3.fromRGB(255, 0, 0)  -- Red for murderer
            else
                highlight.FillColor = Color3.fromRGB(0, 255, 0)  -- Green for innocent
            end
        else
            highlight.Parent = nil  -- If the character is not valid, temporarily remove the highlight
        end
    end

    -- Update chams every frame
    local connection
    connection = RunService.RenderStepped:Connect(function()
        if not player or not player.Parent then
            highlight:Destroy()  -- Clean up the highlight if the player leaves or is removed
            connection:Disconnect()
        else
            updateChams()
        end
    end)
end

-- Apply chams to all existing players
for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        createChams(player)
    end
    player.CharacterAdded:Connect(function()
        createChams(player)
    end)
end

-- Apply chams to players who join later
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        createChams(player)
    end)
end)

-- Clean up chams when a player leaves
Players.PlayerRemoving:Connect(function(player)
    if player.Character then
        local highlight = player.Character:FindFirstChildOfClass("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end)

   end,
})

local GrabGunButton = CombatTab:CreateButton({
   Name = "Grab Gun",
   Callback = function()
      local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local originalPosition = nil

-- Function to teleport to the gun
local function teleportToGun(gun)
    originalPosition = character.HumanoidRootPart.CFrame
    character.HumanoidRootPart.CFrame = gun.CFrame + Vector3.new(0, 0.5, 0) -- Teleport slightly above the gun's position

    wait(0.5) -- Wait for 0.5 seconds

    character.HumanoidRootPart.CFrame = originalPosition -- Teleport back to original position
end

-- Detect when a gun is dropped (This part depends on your specific game and may need adjustments)
game.Workspace.ChildAdded:Connect(function(child)
    if child:IsA("Part") and child.Name == "Gun" then
        teleportToGun(child)
    end
end)

   end,
})

local aimbotButton = MainTab:CreateButton({
   Name = "aimbot",
   Callback = function()
      local userInputService = game:GetService("UserInputService")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local camera = game.Workspace.CurrentCamera
local localPlayer = players.LocalPlayer

local aiming = false
local aimSpeed = 0 -- Set to 0 for instant aiming

-- Function to get the closest player who isn't on the same team
local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(players:GetPlayers()) do
        -- Make sure the player isn't the local player and is alive, and that their team isn't the same as the local player's team
        if player ~= localPlayer 
           and player.Team ~= localPlayer.Team -- Check if the player is on a different team
           and player.Character 
           and player.Character:FindFirstChild("HumanoidRootPart") then
            
            local targetPosition = player.Character.HumanoidRootPart.Position
            local playerPosition = localPlayer.Character.HumanoidRootPart.Position
            local distance = (targetPosition - playerPosition).Magnitude

            if distance < shortestDistance then
                closestPlayer = player
                shortestDistance = distance
            end
        end
    end

    return closestPlayer
end

-- Function to aim instantly at the closest player
local function aimAtPlayer()
    local closestPlayer = getClosestPlayer()

    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPart = closestPlayer.Character.HumanoidRootPart
        local targetPosition = targetPart.Position

        -- Calculate the direction to the target
        local direction = (targetPosition - camera.CFrame.Position).Unit

        -- Instantly update the camera to look at the target
        camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
    end
end

-- Listen for mouse button press to start/stop aiming
userInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = true
    end
end)

userInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = false
    end
end)

-- Continuously update aiming to ensure fast aim
runService.RenderStepped:Connect(function()
    if aiming then
        aimAtPlayer() -- Instantly aim at the closest player every frame while aiming
    end
end)

   end,
})
