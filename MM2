local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "ü§çLoyal's MM2 Scriptü§ç",
   LoadingTitle = "Loyal Hub",
   LoadingSubtitle = "By loyaltwice",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "scriptbyloyal"
   },
   Discord = {
      Enabled = true,
      Invite = "waSWukEAaF", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "MM2 Script | Key",
      Subtitle = "Key In Discord Server",
      Note = "Join Server From Misc Tab",
      FileName = "loyalhubkey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/jyasz0sp"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("üè†Universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Executed",
   Content = "Successfully Executed The Script",
   Duration = 4.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("Script Made By loyaltwice")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
   -- LocalScript

local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onJumpRequest()
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end

userInputService.JumpRequest:Connect(onJumpRequest)

-- Ensure the character's humanoid is always ready to jump
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
end)

   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "WalkspeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local FlingButton = MainTab:CreateButton({
   Name = "Fling",
   Callback = function()
        local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local spinSpeed = 100 -- Speed of spinning, adjust as needed
local flingForce = 1000 -- Force to apply to other players

-- Function to make the character spin
local function spin()
    while true do
        RunService.RenderStepped:Wait()
        rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
    end
end

-- Function to apply force to other players that touch the character
local function onTouch(otherPart)
    local otherHumanoid = otherPart.Parent:FindFirstChild("Humanoid")
    if otherHumanoid and otherHumanoid ~= humanoid then
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = (otherPart.Position - rootPart.Position).unit * flingForce
        bodyVelocity.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bodyVelocity.Parent = otherPart
        game:GetService("Debris"):AddItem(bodyVelocity, 0.1) -- Remove the force after a short time
    end
end

-- Connect the onTouch function to the character's parts
for _, part in pairs(character:GetChildren()) do
    if part:IsA("BasePart") then
        part.Touched:Connect(onTouch)
    end
end

-- Start spinning
spin()
   end,
})

local FpsTab = Window:CreateTab("FPS", nil) -- Title, Image
local Section = FpsTab:CreateSection("Choose Which FPS Boosts you want")

local FpsButton = FpsTab:CreateButton({
   Name = "Remove weapons+pets",
   Callback = function()
        local Workspace = game:GetService("Workspace")

for i,v in pairs (Workspace:GetDescendants()) do
    if v.Name == "Pet" then
        v:Destroy()
    elseif v.Name == "KnifeDisplay" then
        v:Destroy()
    elseif v.Name == "GunDisplay" then
        v:Destroy()
    end
end
   end,
})

local CombatTab = Window:CreateTab("Combat", nil) -- Title, Image
local Section = CombatTab:CreateSection("For murder or sheriff")

local KillallButton = CombatTab:CreateButton({
   Name = "Kill all (Murder)",
   Callback = function()
        local Character = game.Players.LocalPlayer.Character
local knife = Character and Character:FindFirstChild("Knife")

for _, player in ipairs(game.Players:GetPlayers()) do
    if player ~= game.Players.LocalPlayer then
        wait()
        local playerCharacter = player.Character
        local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            Stab()
            firetouchinterest(humanoidRootPart, knife.Handle, 1)
            firetouchinterest(humanoidRootPart, knife.Handle, 0)
        end
    end
end
   end,
})

local RoleButton = CombatTab:CreateButton({
   Name = "Show roles",
   Callback = function()
   local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Placeholder for role determination logic
-- This should be set based on the game's logic (from server, etc.)
local role = "Innocent" -- Possible values: "Murderer", "Sheriff", "Innocent"

-- Function to change the character's color based on role
local function changeColorBasedOnRole()
    if character then
        local color
        if role == "Murderer" then
            color = BrickColor.new("Bright red")
        elseif role == "Sheriff" then
            color = BrickColor.new("Bright blue")
        elseif role == "Innocent" then
            color = BrickColor.new("Bright green")
        else
            return -- If role is unknown, do nothing
        end
        
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") then
                part.BrickColor = color
            end
        end
    end
end

-- Listen for when the character is added or respawned
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    changeColorBasedOnRole()
end)

-- Initial check
changeColorBasedOnRole()

   end,
})
