local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Arsenal Private Script",
   LoadingTitle = "Loading...",
   LoadingSubtitle = "By t7ut",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "scriptbyt7ut"
   },
   Discord = {
      Enabled = false,
      Invite = "waSWukEAaF", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Arsenal Script | Key",
      Subtitle = "Key In Discord Server",
      Note = "Join Server From Misc Tab",
      FileName = "t7uthubkey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/GUqtT4VT"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Universal", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Executed",
   Content = "Successfully Executed The Script",
   Duration = 4.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("Script Made By Playfraud")
      end
   },
},
})

local InfiniteJumpButton = MainTab:CreateButton({
   Name = "Infinite Jump",
   Callback = function()
   -- LocalScript

local player = game.Players.LocalPlayer
local userInputService = game:GetService("UserInputService")
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local function onJumpRequest()
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end

userInputService.JumpRequest:Connect(onJumpRequest)

-- Ensure the character's humanoid is always ready to jump
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
end)

   end,
})

local WalkspeedSlider = MainTab:CreateSlider({
   Name = "Walkspeed Slider",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "WalkspeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local JumpPowerSlider = MainTab:CreateSlider({
   Name = "Jump Power Slider",
   Range = {0, 500},
   Increment = 1,
   Suffix = "Jump Power",
   CurrentValue = 50,
   Flag = "JumpPowerSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})


local TeleportSection = MainTab:CreateSection("Teleport Section")
local LobbyButton = MainTab:CreateButton({
   Name = "Lobby",
   Callback = function()
         local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to teleport the player 10 studs above the given CFrame
local function teleportAboveCFrame(targetCFrame)
    -- Offset the target CFrame by 10 studs in the Y-axis
    local newCFrame = targetCFrame + Vector3.new(0, 10, 0)

    -- Teleport the player's HumanoidRootPart to the new CFrame
    humanoidRootPart.CFrame = newCFrame
end

-- The specified CFrame to teleport above
local targetCFrame = CFrame.new(
    -122.343071, 136.772766, 1.38007069, -- Position
    -0.499959469, 0, -0.866048813,       -- Rotation matrix row 1
    0, 1, 0,                             -- Rotation matrix row 2
    0.866048813, 0, -0.499959469         -- Rotation matrix row 3
)

-- Call the function to teleport
teleportAboveCFrame(targetCFrame)
   end,
})

local ChamsButton = VisualsTab:CreateButton({
   Name = "Chams",
   Callback = function()
         local Players = game:GetService("Players")
local Teams = game:GetService("Teams")
local RunService = game:GetService("RunService")

-- Define a mapping between team names and colors
local teamColors = {
    Blue = Color3.fromRGB(0, 0, 255),   -- Blue team
    Red = Color3.fromRGB(255, 0, 0),    -- Red team
    Green = Color3.fromRGB(0, 255, 0),  -- Green team (example if needed)
    Yellow = Color3.fromRGB(255, 255, 0) -- Yellow team (example if needed)
}

-- Function to get the team color for a player
local function getTeamColor(player)
    local team = player.Team
    if team and teamColors[team.Name] then
        return teamColors[team.Name]
    else
        return Color3.fromRGB(255, 255, 255) -- Default to white if team is not found
    end
end

-- Function to create chams for a player (highlight effect)
local function createChams(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        -- Create the highlight instance
        local highlight = Instance.new("Highlight")
        highlight.Name = "TeamHighlight"
        highlight.Adornee = player.Character
        highlight.FillTransparency = 0.5 -- You can adjust transparency (0 = fully opaque, 1 = fully transparent)
        highlight.OutlineTransparency = 0.1 -- Adjust for outline visibility

        -- Set the initial color based on the player's team
        highlight.FillColor = getTeamColor(player)
        highlight.OutlineColor = highlight.FillColor -- Make the outline the same color as the fill

        -- Parent the highlight to the player's character
        highlight.Parent = player.Character

        -- Update the highlight color if the player's team changes
        player:GetPropertyChangedSignal("Team"):Connect(function()
            highlight.FillColor = getTeamColor(player)
            highlight.OutlineColor = highlight.FillColor
        end)
    end
end

-- Function to remove chams when a player leaves or dies
local function removeChams(player)
    if player.Character and player.Character:FindFirstChild("TeamHighlight") then
        player.Character.TeamHighlight:Destroy()
    end
end

-- Function to handle new players or respawned players
local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        createChams(player)
    end)

    -- Remove chams when the player leaves
    player.AncestryChanged:Connect(function()
        removeChams(player)
    end)
end

-- Set up chams for all players in the game
Players.PlayerAdded:Connect(onPlayerAdded)

-- Set chams for all current players in case the script starts after they've joined
for _, player in ipairs(Players:GetPlayers()) do
    if player.Character then
        createChams(player)
    end
end

   end,
})

local NoclipButton = MainTab:CreateButton({
   Name = "Noclip",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function enableNoclip()
    -- Function to set CanCollide to false for all parts
    local function noclip()
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end

    -- Connect the noclip function to RunService's Stepped event
    RunService.Stepped:Connect(noclip)
end

-- Enable noclip for the player
enableNoclip()

   end,
})

local FlyButton = MainTab:CreateButton({
   Name = "Fly - X",
   Callback = function()
      local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local flying = false
local speed = 50
local bodyVelocity
local bodyGyro

local function startFlying()
    if flying then return end
    flying = true

    bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
    bodyVelocity.P = 1000
    bodyVelocity.Parent = humanoidRootPart

    bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(100000, 100000, 100000)
    bodyGyro.CFrame = humanoidRootPart.CFrame
    bodyGyro.P = 1000
    bodyGyro.Parent = humanoidRootPart

    local function fly()
        local camera = workspace.CurrentCamera
        local moveDirection = Vector3.new(0, 0, 0)

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            moveDirection = moveDirection + (camera.CFrame.LookVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            moveDirection = moveDirection - (camera.CFrame.LookVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            moveDirection = moveDirection - (camera.CFrame.RightVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            moveDirection = moveDirection + (camera.CFrame.RightVector)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection = moveDirection + Vector3.new(0, 1, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
            moveDirection = moveDirection - Vector3.new(0, 1, 0)
        end

        bodyVelocity.Velocity = moveDirection * speed
        bodyGyro.CFrame = camera.CFrame
    end

    RunService.RenderStepped:Connect(fly)
end

local function stopFlying()
    if not flying then return end
    flying = false

    if bodyVelocity then
        bodyVelocity:Destroy()
    end
    if bodyGyro then
        bodyGyro:Destroy()
    end
end

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.X then  -- Press "X" to toggle flying
        if flying then
            stopFlying()
        else
            startFlying()
        end
    end
end)
   end,
})

local AutofarmToggle = MainTab:CreateToggle({
   Name = "Autofarm",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
       local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local getNil = function(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local function enableNoClip()
    local function noClip()
        for _, v in pairs(character:GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide then
                v.CanCollide = false
            end
        end
    end

    RunService.Stepped:Connect(noClip)
end

local function moveToTarget(targetPosition)
    local offsetUnderMap = Vector3.new(0, -3, 0) -- Adjust the Y offset to stay under the map but not fall through
    local riseOffset = Vector3.new(0, 5, 0) -- Rise the character slightly to collect the coin
    humanoidRootPart.CFrame = CFrame.new(targetPosition + offsetUnderMap + riseOffset)
end

local function findNearestObject()
    local gameModel = getNil("Game", "DataModel")
    if not gameModel then
        warn("Game model not found!")
        return
    end

    local coinContainer = gameModel.Workspace.Normal:FindFirstChild("CoinContainer")
    if not coinContainer then
        warn("CoinContainer not found!")
        return
    end

    local objects = coinContainer:GetChildren()
    if #objects == 0 then
        warn("No objects found in CoinContainer!")
        return
    end

    local nearestObject = nil
    local shortestDistance = math.huge

    for _, obj in pairs(objects) do
        if obj:IsA("BasePart") then
            local distance = (humanoidRootPart.Position - obj.Position).magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestObject = obj
            end
        end
    end

    return nearestObject
end

local function teleportToNearestObject()
    local nearestObject = findNearestObject()
    if nearestObject then
        moveToTarget(nearestObject.Position)
    else
        warn("No nearest object found!")
    end
end

-- Track the state of the autofarm
_G.AutofarmActive = true

-- Start the autofarm loop
spawn(function()
    while _G.AutofarmActive do
        teleportToNearestObject()
        wait(3) -- Fixed 3-second delay
    end
end)

-- Enable no-clip
enableNoClip()

-- Anti-detection basic measures
local function kickProtection()
    local mt = getrawmetatable(game)
    setreadonly(mt, false)
    local oldNamecall = mt.__namecall

    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if tostring(method) == "Kick" then
            return
        end
        return oldNamecall(self, ...)
    end)
end

kickProtection()

   end
})

local FpsTab = Window:CreateTab("FPS", nil) -- Title, Image
local Section = FpsTab:CreateSection("Choose Which FPS Boosts you want")

local FpsButton = FpsTab:CreateButton({
   Name = "Remove weapons+pets",
   Callback = function()
        local Workspace = game:GetService("Workspace")

for i,v in pairs (Workspace:GetDescendants()) do
    if v.Name == "Pet" then
        v:Destroy()
    elseif v.Name == "KnifeDisplay" then
        v:Destroy()
    elseif v.Name == "GunDisplay" then
        v:Destroy()
    end
end
   end,
})

local Fps2Button = FpsTab:CreateButton({
   Name = "FpsBoost2",
   Callback = function()
         -- FPS Boost Script
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer

-- Function to reduce the quality of graphics
local function optimizeGraphics()
    -- Set Lighting settings to low quality
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 1000
    Lighting.Brightness = 1
    Lighting.ClockTime = 12

    -- Disable certain effects
    for _, effect in ipairs(Lighting:GetChildren()) do
        if effect:IsA("BlurEffect") or effect:IsA("SunRaysEffect") or effect:IsA("BloomEffect") then
            effect.Enabled = false
        end
    end
end

-- Function to disable unneeded parts and reduce part quality
local function reducePartQuality()
    -- Iterate over all parts in the game
    for _, object in ipairs(workspace:GetDescendants()) do
        if object:IsA("Part") or object:IsA("UnionOperation") or object:IsA("MeshPart") then
            object.Material = Enum.Material.SmoothPlastic
            object.CastShadow = false
        elseif object:IsA("ParticleEmitter") or object:IsA("Trail") then
            object.Enabled = false
        end
    end
end

-- Function to optimize player character
local function optimizeCharacter()
    if player and player.Character then
        for _, child in ipairs(player.Character:GetDescendants()) do
            if child:IsA("BasePart") then
                child.Material = Enum.Material.SmoothPlastic
                child.CastShadow = false
            elseif child:IsA("ParticleEmitter") or child:IsA("Trail") then
                child.Enabled = false
            end
        end
    end
end

-- Connect character added event
player.CharacterAdded:Connect(optimizeCharacter)

-- Call optimization functions
optimizeGraphics()
reducePartQuality()
optimizeCharacter()

   end,
})

local Fps3Button = FpsTab:CreateButton({
   Name = "FpsBoost3",
   Callback = function()
         -- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer

-- Optimize physics throttling
RunService:Set3dRenderingEnabled(false)  -- Disables 3D rendering, useful for bots or background tasks

-- Function to optimize physics settings
local function optimizePhysics()
    -- Set Physics settings to a lower frequency for non-essential objects
    local physicsService = game:GetService("PhysicsService")
    physicsService.Throttle = Enum.ThrottleResetPriority.OccupantTimeout
end

-- Function to optimize rendering distance
local function optimizeRenderingDistance()
    -- Reduce the rendering distance for objects
    for _, object in ipairs(workspace:GetDescendants()) do
        if object:IsA("BasePart") or object:IsA("UnionOperation") or object:IsA("MeshPart") then
            object.Changed:Connect(function(property)
                if property == "Position" or property == "Size" then
                    local distance = (object.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance > 500 then  -- Adjust the distance threshold as needed
                        object.Transparency = 1
                    else
                        object.Transparency = 0
                    end
                end
            end)
        end
    end
end

-- Function to optimize GUI elements
local function optimizeGUI()
    -- Disable or minimize resource-heavy GUI elements
    local playerGui = player:WaitForChild("PlayerGui")
    for _, gui in ipairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            gui.Enabled = false  -- Disable GUI elements to reduce draw calls
        end
    end
end

-- Call optimization functions
optimizePhysics()
optimizeRenderingDistance()
optimizeGUI()

   end,
})

local CombatTab = Window:CreateTab("Combat", nil) -- Title, Image
local Section = CombatTab:CreateSection("For murder or sheriff")

local KillallButton = CombatTab:CreateButton({
   Name = "Kill all (Murder)",
   Callback = function()
        local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Knife = Character:FindFirstChild("Knife") -- Ensure this is the correct name

-- Function to simulate the stabbing action
local function Stab()
    if Knife and Knife:FindFirstChild("Handle") then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    -- Simulate touch interaction with the knife
                    firetouchinterest(humanoidRootPart, Knife.Handle, 1)
                    firetouchinterest(humanoidRootPart, Knife.Handle, 0)
                end
            end
        end
    end
end

-- Check if the knife is equipped, and if not, equip it
if Knife and not Knife.Parent:IsA("Tool") then
    LocalPlayer.Backpack:WaitForChild(Knife.Name).Parent = Character
end

-- Call Stab function when the knife is equipped
Knife.Equipped:Connect(function()
    Stab()
end)

   end,
})

local NormalizeAnimsButton = MainTab:CreateButton({
   Name = "Normalize Anims",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local desiredSpeed = 25
local visualSpeed = 16

local function adjustAnimationSpeed()
    -- Normalize animation speed to look like the character is moving at visualSpeed
    local speedRatio = visualSpeed / desiredSpeed

    for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
        track:AdjustSpeed(speedRatio)
    end
end

-- Set the desired speed and adjust animations accordingly
humanoid.WalkSpeed = desiredSpeed

RunService.RenderStepped:Connect(adjustAnimationSpeed)

   end,
})

local SecurityTab = Window:CreateTab("Security", nil) -- Title, Image
local SecuritySection = SecurityTab:CreateSection("Secure urself using this!")

local AntiFlingButton = SecurityTab:CreateButton({
   Name = "Anti Fling",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local lastPosition = humanoidRootPart.Position
local allowedDistance = 50 -- Maximum allowed distance change per frame

local function antiFling()
    RunService.Heartbeat:Connect(function()
        local currentPosition = humanoidRootPart.Position
        local distance = (currentPosition - lastPosition).Magnitude

        if distance > allowedDistance then
            humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
            humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.CFrame = CFrame.new(lastPosition)
        else
            lastPosition = currentPosition
        end
    end)
end

character.HumanoidRootPart.AncestryChanged:Connect(function()
    if not character:IsDescendantOf(workspace) then
        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        lastPosition = humanoidRootPart.Position
    end
end)

-- Ensure the anti-fling script runs
player.CharacterAdded:Connect(function(char)
    character = char
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    lastPosition = humanoidRootPart.Position
    antiFling()
end)

-- Initial run
antiFling()

   end,
})

local AntiVoidButton = SecurityTab:CreateButton({
   Name = "Anti Void (don't use before/while autofarming!)",
   Callback = function()
         local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local positionHistory = {}
local checkInterval = 1 -- Interval in seconds to save the player's position
local maxHistoryTime = 10 -- Maximum time in seconds to keep positions

-- Save the player's position at regular intervals
local function savePosition()
    while true do
        table.insert(positionHistory, 1, humanoidRootPart.Position)
        if #positionHistory > maxHistoryTime / checkInterval then
            table.remove(positionHistory)
        end
        wait(checkInterval)
    end
end

-- Check if the player is falling into the void and teleport them back
local function antiVoid()
    local voidYLevel = -50 -- Y level considered as void

    RunService.Heartbeat:Connect(function()
        if humanoidRootPart.Position.Y < voidYLevel then
            if #positionHistory > 0 then
                local lastSafePosition = positionHistory[1]
                humanoidRootPart.CFrame = CFrame.new(lastSafePosition)
                humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                humanoidRootPart.RotVelocity = Vector3.new(0, 0, 0)
            end
        end
    end)
end

character.HumanoidRootPart.AncestryChanged:Connect(function()
    if not character:IsDescendantOf(workspace) then
        character = player.Character or player.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        positionHistory = {}
        coroutine.wrap(savePosition)()
        antiVoid()
    end
end)

-- Start saving positions and anti-void check
coroutine.wrap(savePosition)()
antiVoid()

   end,
})

local VisualsTab = Window:CreateTab("Visuals", nil) -- Title, Image
local EspButton = VisualsTab:CreateButton({
   Name = "Esp",
   Callback = function()
      local players = game:GetService("Players")
local runService = game:GetService("RunService")
local teamsService = game:GetService("Teams")
local camera = game.Workspace.CurrentCamera
local localPlayer = players.LocalPlayer

-- Define the team colors (you can add/change colors as needed)
local teamColors = {
    ["TRC"] = Color3.fromRGB(255, 0, 0),    -- Red
    ["TBC"] = Color3.fromRGB(0, 0, 255),    -- Blue
    ["TOC"] = Color3.fromRGB(255, 165, 0),  -- Orange
    ["TPC"] = Color3.fromRGB(128, 0, 128),  -- Purple
    ["TGC"] = Color3.fromRGB(0, 255, 0),    -- Green
    ["TYC"] = Color3.fromRGB(255, 255, 0)   -- Yellow
}

-- Function to create a nametag
local function createNametag(player)
    if player == localPlayer then return end -- Don't create nametags for yourself

    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Create the BillboardGui (nametag)
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "Nametag"
    billboardGui.Adornee = humanoidRootPart
    billboardGui.Size = UDim2.new(0, 100, 0, 50)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Raise the nametag above the player
    billboardGui.AlwaysOnTop = true

    -- Create the nametag frame
    local frame = Instance.new("Frame", billboardGui)
    frame.BackgroundTransparency = 0.5
    frame.Size = UDim2.new(1, 0, 1, 0)
    
    -- Create a TextLabel for displaying player information (health, distance, name)
    local nametagText = Instance.new("TextLabel", frame)
    nametagText.Size = UDim2.new(1, 0, 1, 0)
    nametagText.BackgroundTransparency = 1
    nametagText.TextColor3 = Color3.fromRGB(255, 255, 255)
    nametagText.TextScaled = true
    nametagText.Font = Enum.Font.SourceSansBold
    nametagText.TextStrokeTransparency = 0.5
    
    -- Attach the BillboardGui to the player's character
    billboardGui.Parent = humanoidRootPart

    -- Function to update the nametag text
    local function updateNametag()
        local distance = math.floor((humanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude)
        local health = math.floor(humanoid.Health)
        nametagText.Text = string.format("%s\nHP: %d\nDistance: %d studs", player.Name, health, distance)

        -- Get the player's team and set the color based on the team
        if player.Team and teamColors[player.Team.Name] then
            frame.BackgroundColor3 = teamColors[player.Team.Name]
        else
            frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255) -- Default to white if no team is found
        end
    end
    
    -- Update nametag continuously
    runService.RenderStepped:Connect(updateNametag)
end

-- Create nametags for all existing players
for _, player in pairs(players:GetPlayers()) do
    createNametag(player)
end

-- When a new player joins, create a nametag for them
players.PlayerAdded:Connect(createNametag)

-- When a player respawns, recreate their nametag
players.PlayerRemoving:Connect(function(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local billboardGui = player.Character.HumanoidRootPart:FindFirstChild("Nametag")
        if billboardGui then
            billboardGui:Destroy() -- Remove the nametag when the player leaves
        end
    end
end)

-- Recreate nametag on respawn
players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        createNametag(player)
    end)
end)

   end,
})

local wallbang = MainTab:CreateButton({
   Name = "wallbang",
   Callback = function()
      local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Mouse = Players.LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera

-- Custom function to ignore walls and only detect players
local function raycastIgnoreWalls(origin, direction, ignoreList)
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = ignoreList
    params.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(origin, direction * 5000, params) -- Long range ray
    if result then
        return result
    end
    return nil
end

-- Function to get the closest player to your mouse
local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
            local playerPos, onScreen = Camera:WorldToScreenPoint(humanoidRootPart.Position)

            if onScreen then
                local mousePos = Vector2.new(Mouse.X, Mouse.Y)
                local distance = (Vector2.new(playerPos.X, playerPos.Y) - mousePos).Magnitude

                if distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Function to "shoot" the closest player (ignores walls)
local function shootPlayer()
    local targetPlayer = getClosestPlayer()

    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
        local origin = Camera.CFrame.Position
        local direction = (humanoidRootPart.Position - origin).Unit

        -- Raycast ignoring walls and non-players
        local ignoreList = {Players.LocalPlayer.Character}
        local raycastResult = raycastIgnoreWalls(origin, direction, ignoreList)

        if raycastResult and raycastResult.Instance and raycastResult.Instance:IsDescendantOf(targetPlayer.Character) then
            print("Player hit: " .. targetPlayer.Name)

            -- Simulate damage or effects here (for example, you could damage the player's humanoid)
            local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:TakeDamage(100) -- Example: Instantly deal damage
            end
        else
            print("Missed or hit something else")
        end
    end
end

-- Bind shooting to mouse click
Mouse.Button1Down:Connect(function()
    shootPlayer()
end)

   end,
})

local KillAllButton = CombatTab:CreateButton({
   Name = "kill all",
   Callback = function()
      local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local KnifeTool = LocalPlayer.Backpack:FindFirstChild("Knife") or LocalPlayer.Character:FindFirstChild("Knife") -- Assuming a knife is in the player's backpack or character
local DamageAmount = 100 -- Amount of damage to deal per attack (this can be set to the knife's damage value)

-- Function to kill a player
local function killPlayer(targetPlayer)
    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = targetPlayer.Character.Humanoid
        humanoid:TakeDamage(DamageAmount)
        print("Killed player: " .. targetPlayer.Name)
    end
end

-- Function to kill all players on the map
local function killAllPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then -- Don't kill yourself
            killPlayer(player)
        end
    end
end

-- Trigger the kill-all function (you can bind this to an action like a key press or button click)
local function onActivate()
    if KnifeTool then
        killAllPlayers()
    else
        print("Knife tool not found!")
    end
end

-- Connect to tool activation (if the knife tool is equipped)
if KnifeTool then
    KnifeTool.Activated:Connect(onActivate)
end

-- If you want it to be automatic, just call killAllPlayers() directly like this:
-- killAllPlayers()

   end,
})

local aimbotButton = MainTab:CreateButton({
   Name = "aimbot",
   Callback = function()
      local userInputService = game:GetService("UserInputService")
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local camera = game.Workspace.CurrentCamera
local localPlayer = players.LocalPlayer

local aiming = false
local fovRadius = 100 -- Define the radius of the FOV circle

-- Create a white outline FOV circle with transparency inside
local fovCircle = Drawing.new("Circle")
fovCircle.Thickness = 3
fovCircle.NumSides = 75
fovCircle.Radius = fovRadius
fovCircle.Color = Color3.new(1, 1, 1) -- White color for the outline
fovCircle.Filled = false -- No fill to make the inside transparent
fovCircle.Transparency = 1 -- Fully visible outline
fovCircle.Visible = true -- Default to invisible, shows only in first-person mode

-- Function to check if the player is in first-person mode
local function isInFirstPerson()
    return camera.FieldOfView <= 70 -- Example FOV threshold for first-person, adjust as needed
end

-- Function to get the closest player who isn't on the same team and is within FOV
local function getClosestPlayerInFOV()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(players:GetPlayers()) do
        -- Make sure the player isn't the local player, is alive, and is on a different team
        if player ~= localPlayer 
           and player.Team ~= localPlayer.Team -- Check if the player is on a different team
           and player.Character 
           and player.Character:FindFirstChild("Head") then -- Target the Head part
            
            local targetPosition = player.Character.Head.Position
            local screenPosition, onScreen = camera:WorldToViewportPoint(targetPosition)
            
            -- Check if the player is on the screen
            if onScreen then
                -- Calculate distance between player position and local player position
                local playerPosition = localPlayer.Character.HumanoidRootPart.Position
                local distance = (targetPosition - playerPosition).Magnitude

                -- Check if the player is within the FOV circle (by checking screen coordinates)
                local centerX, centerY = camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2
                local distanceFromCenter = ((screenPosition.X - centerX)^2 + (screenPosition.Y - centerY)^2)^0.5
                
                if distanceFromCenter <= fovRadius and distance < shortestDistance then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end

    return closestPlayer
end

-- Function to aim instantly at the closest player's head (within FOV)
local function aimAtPlayerInFOV()
    local closestPlayer = getClosestPlayerInFOV()

    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
        local targetPart = closestPlayer.Character.Head
        local targetPosition = targetPart.Position

        -- Calculate the direction to the target (head)
        local direction = (targetPosition - camera.CFrame.Position).Unit

        -- Instantly update the camera to look at the head
        camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
    end
end

-- Function to kill the closest player (within FOV)
local function killPlayerInFOV()
    local closestPlayer = getClosestPlayerInFOV()

    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Humanoid") then
        -- Kill the closest player within the FOV by setting their health to 0
        closestPlayer.Character.Humanoid.Health = 0
    end
end

-- Listen for key press to start/stop aiming (E key)
userInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then
        aiming = true
    end
end)

userInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.E then
        aiming = false
    end
end)

-- Continuously update aiming and drawing FOV circle
runService.RenderStepped:Connect(function()
    -- Check if the player is in first-person mode
    if isInFirstPerson() then
        fovCircle.Visible = true -- Show the FOV circle only in first-person mode
        -- Update FOV circle position to be in the center of the screen
        fovCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

        -- Aim and kill players only when aiming
        if aiming then
            aimAtPlayerInFOV() -- Aim at the closest player within the FOV
            killPlayerInFOV()   -- Kill the closest player within the FOV
        end
    else
        fovCircle.Visible = false -- Hide the FOV circle when not in first-person mode
    end
end)

   end,
})
